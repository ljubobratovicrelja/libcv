{"name":"Libcv","tagline":"Library for basic computer vision tasks.","body":"# LibCV\r\n\r\nSmall library containing data structures and algorithms for most basic computer vision tasks, \r\ndeveloped as learning project and coding practice, to be used for my faculty projects.\r\n\r\n## Contents\r\nAt this early stage, libcv contains following:\r\n* Array structures - with reference counted data, and slicing operators.\r\n\t* template vector (with heap data), and vectorx (with statically defined size).\r\n\t* template matrix (m by n) designed for large matrices, that could hold images.\r\n\t* image array structure abstraction with type defined in runtime, which essentially is an 3D array.\r\n* template bounded priority queue structure\r\n* basic k-d tree structure implementation with k-nearest neighbour search.\r\n* 2D contour, polygon and region structures\r\n* basic image manipulation algorithms.\r\n* basic linear algebra operations.\r\n* lmdif integration from cminpack.\r\n* image i/o\r\n* basic gui support for showing images\r\n\r\n## Dependencies\r\nLibcv depends on following libraries:\r\n* Qt4 (4.8.6)\r\n* libpng (libpng16)\r\n* libjpg (jpegsr8)\r\n* lapacke\r\n* blas\r\n\r\n## Documentation\r\nProper documentation is not available, and it will not be if there is no interest\r\nfrom other people to use this library. I'll try to document code in doxygen style,\r\nso if anyone is up to it, he can build doc files himself.\r\n\r\n## Compilation\r\nLibCV is mainly developed on Ubuntu with gcc 4.9.2. Ubuntu 15.04 has all needed libraries (and\r\ncorresponding versions) on it's repositories, which can be installed using apt-get.\r\n\r\nIt was not tested on other *nix systems, but as long as your able to use gcc\r\nwith c++11 support, you could easily download, build and link needed libraries.\r\nAlso building blas and lapack should not be of any trouble on any *nix system.\r\n\r\n### Custom CMake build flags\r\n* **WITH_GUI** - if FALSE, ignores gui module, and doesn't link Qt\r\n* **WITH_JPEG** - turn on jpeg i/o support. If FALSE, does not link libjpeg.\r\n* **DOUBLE_REAL** - if TRUE, real type in LibCV is double, if FALSE it is of single precision.\r\n* **COMPILE_EXAMPLES** - compile example programs in ./examples/ directory. \r\n\r\n## Compilation on Windows\r\nLibCV has been tested on Windows 8 with Visual Studio 2013. Instructions here will\r\nguide compilation using these tools, but for any older VC should not be much different.\r\n\r\n**NOTE:** In **./thirdParty/ directory are built libs using Visual Studio 2013 (VC12) x64**. If you need\r\nto compile it using some other toolchain, here are instructions I've followed to compile\r\ndependencies with vc12:\r\n\r\n### Qt\r\nDownload Qt 4.8.6 source here:\r\nhttp://download.qt.io/archive/qt/4.8/4.8.6/\r\n\r\nCompilation steps:\r\n\r\n1. Open VS Command line\r\n2. configure -release -opensource -no-libpng -no-libjpeg\r\n3. nmake\r\n4. nmake install\r\n\r\n**NOTE:** The **-no-libpng** and **-no-libjpeg** flags are entered since specified versions of \r\npng and jpeg libraries are used, Qt internals would not match, and image i/o\r\nwould not work - png would compile ok, but runtime error would be thrown on \r\nimage loading, for jpeg I'm not sure, haven't test it.\r\n\r\n### Png \r\nlibpng 1.6 can be downloaded at sourceforge:\r\n[http://sourceforge.net/projects/libpng/files/](http://sourceforge.net/projects/libpng/files/)\r\n\r\nYou'd need [zlib](http://www.zlib.net/) also. Both are easily compiled using CMake, \r\nand with **vc12** should not be any trouble.\r\n\r\n### Jpeg\r\nI've skipped compiling jpeg on windows. There's some instructions on the web how to build\r\nit using nmake, but I've had no luck. If anyone can help with that, please mail me, I'd be\r\ngrateful.\r\n\r\n### OpenBLAS\r\nEasiest way to get blas and lapacke is through OpenBlas. Here are some nice instructions\r\non how to install it:\r\n[https://github.com/arrayfire/arrayfire/wiki/CBLAS-for-Windows](https://github.com/arrayfire/arrayfire/wiki/CBLAS-for-Windows)\r\n\r\n\r\nAs guide suggests, you'd need cygwin with x86_64-w64-mingw32-gcc and x86_64-w64-mingw32-gfortran,\r\nand with cygwin terminal, compilation is easy - just make, and make install:\r\n\r\n```\r\nmake BINARY=64 CC=/usr/bin/x86_64-w64-mingw32-gcc-4.8.3.exe FC=/usr/bin/x86_64-w64-mingw32-gfortran.exe\r\nmake PREFIX=./package install\r\n```\r\n\r\nStep 8., 9. and 10. can be skipped, since resulting lib file (libopenblas.dll.a) can be \r\nsuccessfully linked with VC.\r\n\r\n# Release Versions\r\nVersion 0.1 is tagged because it was the version which [camera calibration](https://github.com/ljubobratovicrelja/camera_calibration)\r\nis developed with. But I can't guarantee the stability of library inside - it is only preserved because of the camera calibration project.\r\n \r\n# Contributions\r\nIf anybody is interested to make a contrubution, you're welcome, and thank you! \r\nOf course at this point, coding conventions or such rules are not firmly \r\nestablished - as long as you're willing to contribute, just make a pull request, \r\nand we'll work it out...\r\n\r\n# LICENSE\r\nLibrary is under MIT license. See LICENSE file for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}